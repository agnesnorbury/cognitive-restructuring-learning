b <- plot(fit, pars = "beta_pos_init", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_pos_init") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
model <- "m_belief_negpos_IGnotIG_2_init_delta_beta"
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 500,            # these are used to tune the sampler and ’burn in’
iter = 1000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
model <- "m_belief_negpos_IGnotIG_2_init_delta_mem_beta"
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 500,            # these are used to tune the sampler and ’burn in’
iter = 1000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 1000,            # these are used to tune the sampler and ’burn in’
iter = 2000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "beta_neg_init", "mem")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "alpha_pos_init", "beta_pos_init", "mem")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
# plot posterior densities for key parameters
a <- plot(fit, pars = "alpha_neg", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_neg") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_neg", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_neg") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
a <- plot(fit, pars = "alpha_pos", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_pos") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_pos", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_pos") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
# a <- plot(fit, pars = "tau", ci_level = 0.5, fill_color = "sky blue") +
#   ggtitle("posterior tau") +
#   theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
# a
a <- plot(fit, pars = "alpha_neg_init", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_neg_init") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_neg_init", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_neg_init") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
a <- plot(fit, pars = "alpha_pos_init", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_pos_init") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_pos_init", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_pos_init") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
a <- plot(fit, pars = "mem", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior mem") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
a
model <- "m_belief_negpos_IGnotIG_2_init_delta_tau_beta"
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 500,            # these are used to tune the sampler and ’burn in’
iter = 1000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
model
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "beta_neg_init", "tau")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "alpha_pos_init", "beta_pos_init", "tau")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model <- "m_belief_negpos_IGnotIG_2_beta_notau"
fit <- readRDS(file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
# check overall dx
check_hmc_diagnostics(fit)
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_pos", "beta_pos")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model <- "m_belief_negpos_IGnotIG_2_init_delta_beta"
fit <- readRDS(file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
# check overall dx
check_hmc_diagnostics(fit)
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "beta_neg_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "alpha_pos_init", "beta_pos_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
# plot posterior densities for key parameters
a <- plot(fit, pars = "alpha_neg", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_neg") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_neg", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_neg") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
a <- plot(fit, pars = "alpha_pos", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_pos") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_pos", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_pos") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
# a <- plot(fit, pars = "tau", ci_level = 0.5, fill_color = "sky blue") +
#   ggtitle("posterior tau") +
#   theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
# a
a <- plot(fit, pars = "alpha_neg_init", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_neg_init") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_neg_init", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_neg_init") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
a <- plot(fit, pars = "alpha_pos_init", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_pos_init") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_pos_init", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_pos_init") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
# a <- plot(fit, pars = "mem", ci_level = 0.5, fill_color = "sky blue") +
#   ggtitle("posterior mem") +
#   theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
# a
model <- "m_belief_negpos_IGnotIG_2_initIG_delta_tau_beta"
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 500,            # these are used to tune the sampler and ’burn in’
iter = 1000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 500,            # these are used to tune the sampler and ’burn in’
iter = 1000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "tau")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "beta_pos_init", "tau")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model <- "m_belief_negpos_IGnotIG_2_initIG_delta_beta"
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 500,            # these are used to tune the sampler and ’burn in’
iter = 1000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
model
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "beta_pos_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model <- "m_belief_negpos_IGnotIG_2_beta_notau"
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_pos", "beta_pos")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model <- "m_belief_negpos_IGnotIG_2_init_delta_beta"
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "beta_neg_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model <- "m_belief_negpos_IGnotIG_2_beta_notau"
fit <- readRDS(file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_pos", "beta_pos")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model
model <- "m_belief_negpos_IGnotIG_2_init_delta_beta"
fit <- readRDS(file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "beta_neg_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "alpha_pos_init", "beta_pos_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model <- "m_belief_negpos_IGnotIG_2_init_beta"
fit <- readRDS(file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "beta_neg_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "alpha_pos_init", "beta_pos_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model <- "m_belief_negpos_IGnotIG_2_beta_notau"
model <- "m_belief_negpos_IGnotIG_2_beta_notau"
data_to_fit <- "b123"
## select data to model
data_long_b123 <- data_long_all %>%
dplyr::select(subID, ID, trialNo, itemNo, blockNo, valence, chosen_attr_type, correct, rt) %>%
mutate(valence01 = ifelse(valence == "negative", 0,
ifelse(valence == "positive", 1, NA)),
choiceIG = ifelse(chosen_attr_type == "internal_global", 2, 1),
choiceIG01 = ifelse(chosen_attr_type == "internal_global", 1, 0)) %>%
group_by(subID) %>%
mutate(newTrialNo = 1:n()) %>%
ungroup()
# for block1, int_spec = 1 int_glob = 2
# for block2, ext_glob = 1 int_glob = 2
# for block3, ext_spec = 1 int_glob = 2
# create arrays of choice options and responses for each participant [and time point]
blockNo <- valence <- choiceIG <- choiceIG01 <- outcome <- array(0, dim = c(nPpts, nTrials_max))
nT_ppts <- array(nTrials_max, dim = c(nPpts))
for (p in 1:nPpts) {
blockNo[p,]   <- with(eval(as.symbol(paste0("data_long_", data_to_fit))), blockNo[ID==p])
valence[p,]   <- with(eval(as.symbol(paste0("data_long_", data_to_fit))), valence01[ID==p])
choiceIG[p,]  <- with(eval(as.symbol(paste0("data_long_", data_to_fit))), choiceIG[ID==p])
choiceIG01[p,]<- with(eval(as.symbol(paste0("data_long_", data_to_fit))), choiceIG01[ID==p])
outcome[p,]   <- with(eval(as.symbol(paste0("data_long_", data_to_fit))), correct[ID==p])
}
# create data list to pass to stan
data_list = list(
nPpts = nPpts,
nTrials_max = nTrials_max,
nT_ppts = nT_ppts,
blockLength = nTrials_max/max(blockNo),
blockNo = blockNo,
valence = valence,
nChoices = 2,
choiceIG = choiceIG01,
outcome = outcome
)
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 1000,            # these are used to tune the sampler and ’burn in’
iter = 2000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
#fit <- readRDS(file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
# check overall dx
check_hmc_diagnostics(fit)
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_pos", "beta_pos")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
a <- plot(fit, pars = "alpha_neg", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_neg") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_neg", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_neg") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
a <- plot(fit, pars = "alpha_pos", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_pos") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_pos", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_pos") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
model <- "m_belief_negpos_IGnotIG_2_beta2_notau"
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 1000,            # these are used to tune the sampler and ’burn in’
iter = 2000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_pos", "beta_pos")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
a <- plot(fit, pars = "alpha_neg", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_neg") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_neg", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_neg") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
a <- plot(fit, pars = "alpha_pos", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior alpha_pos") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
b <- plot(fit, pars = "beta_pos", ci_level = 0.5, fill_color = "sky blue") +
ggtitle("posterior beta_pos") +
theme(axis.text.y=element_blank(), plot.title=element_text(size = 12, face = "bold", hjust = 0.5))
(a + b)
# original data
y <- data_long_b123$choiceIG01
# extract replicate data generated using posterior parameter estimates
y_rep <- as.data.frame(summary(fit, pars = c("y_rep"))$summary) %>%
filter(mean>=0) %>%   #remove padded values for trials ppts didn't actually complete
dplyr::select(`50%`) %>%
add_rownames(var = "var") %>%
separate(var, sep="\\[", into=c("variable","tmp"), remove=TRUE, extra="drop") %>%
separate(tmp, sep=",", into=c("ID","trial"), remove=TRUE, extra="drop") %>%
separate(trial, sep=-1, into="trial", extra="drop") %>%
mutate(ID=as.numeric(ID)) %>%
arrange(ID) %>%
rename(mean_predicted = `50%`)
# predictive accuracy (per sub)
y_rep <- cbind(y_rep, observed=y)
accs <- y_rep %>%
group_by(ID) %>%
mutate(acc = (mean_predicted==observed)) %>%
summarise(mean_acc = mean(acc))
# predictive accuracy (overall)
summ <- accs %>%
summarise(mean_pred_acc=round(mean(mean_acc),2), sd_pred_acc=round(sd(mean_acc),2))
print(summ)
# sum log lik for each participant
sum_log_liks <- rstan::extract(fit, pars = "log_lik")[[1]]
mean_sum_log_liks <- colMeans(sum_log_liks) # average over samples
# pseudo r2
# pseudo-r2 can be calculated as 1 - L/C where L = sumloglik over participants and C = likelihood of observing by chance (nTrials*log(0.5))
pseudo_r2 = 1 - ( mean_sum_log_liks/ (nTrials_max*log(0.5)) )
print(mean(pseudo_r2))
# comparison between belief models
models_to_compare <- c("m_belief_negpos_IGnotIG_2",
"m_belief_negpos_IGnotIG_2_init",
"m_belief_negpos_IGnotIG_2_init_all",
"m_belief_negpos_IGnotIG_2_init_delta",
"m_belief_negpos_IGnotIG_2_init_2delta",
"m_belief_negpos_IGnotIG_2_init_delta_mem",
"m_belief_negpos_IGnotIG_2_beta2_notau"
)
data_to_fit <- "b123"
for (i in 1:length(models_to_compare)) {
fit <- readRDS(paste0("./stan-fits/",models_to_compare[i],"-",data_to_fit, "-",task_ver,"-fit.rds"))
assign(paste0("loo",as.character(i)), loo(fit, mc.cores = nCores))
}
loo_compare(loo1, loo2, loo3, loo4, loo5, loo6, loo7)
model <- "m_belief_negpos_IGnotIG_2_init_delta_beta"
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 1000,            # these are used to tune the sampler and ’burn in’
iter = 2000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
-0.8 + -0.82 + -0.91 + -0.77 + -0.65 + -0.9
(1-0.43) + (1-0.38) + (1-0.24) + (1-0.48) + (1-0.62) + (1-0.41)
-4.85 - 0.83 + - 0.7
3.44 + (1-0.40) + (1-0.55)
0/8.3
model
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 1000,            # these are used to tune the sampler and ’burn in’
iter = 2000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
model
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "beta_neg_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "alpha_pos_init", "beta_pos_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
models_to_compare <- c("m_belief_negpos_IGnotIG_2",
"m_belief_negpos_IGnotIG_2_init",
"m_belief_negpos_IGnotIG_2_init_all",
"m_belief_negpos_IGnotIG_2_init_delta",
"m_belief_negpos_IGnotIG_2_init_2delta",
"m_belief_negpos_IGnotIG_2_init_delta_mem",
"m_belief_negpos_IGnotIG_2_beta2_notau",
"m_belief_negpos_IGnotIG_2_init_delta_beta"
)
data_to_fit <- "b123"
for (i in 1:length(models_to_compare)) {
fit <- readRDS(paste0("./stan-fits/",models_to_compare[i],"-",data_to_fit, "-",task_ver,"-fit.rds"))
assign(paste0("loo",as.character(i)), loo(fit, mc.cores = nCores))
}
loo_compare(loo1, loo2, loo3, loo4, loo5, loo6, loo7, loo8)
model <- "m_belief_negpos_IGnotIG_2_init_delta_mem_beta"
data_to_fit <- "b123"
## select data to model
data_long_b123 <- data_long_all %>%
dplyr::select(subID, ID, trialNo, itemNo, blockNo, valence, chosen_attr_type, correct, rt) %>%
mutate(valence01 = ifelse(valence == "negative", 0,
ifelse(valence == "positive", 1, NA)),
choiceIG = ifelse(chosen_attr_type == "internal_global", 2, 1),
choiceIG01 = ifelse(chosen_attr_type == "internal_global", 1, 0)) %>%
group_by(subID) %>%
mutate(newTrialNo = 1:n()) %>%
ungroup()
# for block1, int_spec = 1 int_glob = 2
# for block2, ext_glob = 1 int_glob = 2
# for block3, ext_spec = 1 int_glob = 2
# create arrays of choice options and responses for each participant [and time point]
blockNo <- valence <- choiceIG <- choiceIG01 <- outcome <- array(0, dim = c(nPpts, nTrials_max))
nT_ppts <- array(nTrials_max, dim = c(nPpts))
for (p in 1:nPpts) {
blockNo[p,]   <- with(eval(as.symbol(paste0("data_long_", data_to_fit))), blockNo[ID==p])
valence[p,]   <- with(eval(as.symbol(paste0("data_long_", data_to_fit))), valence01[ID==p])
choiceIG[p,]  <- with(eval(as.symbol(paste0("data_long_", data_to_fit))), choiceIG[ID==p])
choiceIG01[p,]<- with(eval(as.symbol(paste0("data_long_", data_to_fit))), choiceIG01[ID==p])
outcome[p,]   <- with(eval(as.symbol(paste0("data_long_", data_to_fit))), correct[ID==p])
}
# create data list to pass to stan
data_list = list(
nPpts = nPpts,
nTrials_max = nTrials_max,
nT_ppts = nT_ppts,
blockLength = nTrials_max/max(blockNo),
blockNo = blockNo,
valence = valence,
nChoices = 2,
choiceIG = choiceIG01,
outcome = outcome
)
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 1000,            # these are used to tune the sampler and ’burn in’
iter = 2000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "beta_neg_init", "mem")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "alpha_pos_init", "beta_pos_init", "mem")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
model <- "m_belief_negpos_IGnotIG_2_init_2delta_beta"
## fit model using rstan
fit <- stan(
file = paste0("./stan-models/", model, ".stan"),
data = data_list,
chains = 4,               # run 4 separate chains to assess convergence
warmup = 1000,            # these are used to tune the sampler and ’burn in’
iter = 2000,              # number of iterations (#kept = chains*(iter - warmup))
cores = nCores            # chains to be run in parallel on separate cores (if possible)
)
# save
saveRDS(fit, file = paste0("./stan-fits/", model, "-", data_to_fit, "-", task_ver, "-fit.rds"))
model
sub <- ("[1]")
params <- c("alpha_neg", "beta_neg", "alpha_neg_init", "beta_neg_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
params <- c("alpha_pos", "beta_pos", "alpha_pos_init", "beta_pos_init")
params_sub <- c(t(outer(params, sub, paste, sep = "")))
pairs(fit, pars=params_sub)
